#!/usr/bin/env python
"""

From OSMExpress https://github.com/protomaps/osmexpress Copyright 2019 Protomaps.
All rights reserved. Licensed under 2-Clause BSD, see LICENSE

"""
import argparse
from datetime import datetime, timezone
import fcntl
import logging
import os
import subprocess
import sys
import tempfile
from textwrap import wrap
import time

from server import ReplicationServer

# expects osmx to be on the PATH.
osmx = "osmx"


logger = logging.getLogger(__name__)


def generate_augmented_diff(current_id, osmx_db, osc_gz_file, output_path):
    # Generate Augmented Diff
    adiff_start = time.time()
    fd_unzipped, path_unzipped = tempfile.mkstemp(suffix=".osc")
    subprocess.call(["gunzip", "-kc", osc_gz_file], stdout=fd_unzipped)
    [pt1, pt2, pt3] = wrap(str(current_id).zfill(9), 3)
    output_file = os.path.join(output_path, pt1, pt2, "{}.adiff.xml".format(pt3))
    subprocess.check_call(
        ["python3", "./augmented_diff.py", osmx_db, path_unzipped, output_file]
    )
    logger.info(
        "Augmented diff generated for {} in {}s".format(
            current_id, time.time() - adiff_start
        )
    )


def main():
    parser = argparse.ArgumentParser(
        description="Update an OSMX Database, optionally generating augmented diffs."
    )
    parser.add_argument("osmx_db", help="Path to OSMX database")
    parser.add_argument(
        "replication_server",
        help="Path to replication server, e.g. https://planet.openstreetmap.org/replication/minute/",
    )
    parser.add_argument(
        "-a",
        "--augmented-diff",
        help="Generate augmented diff and save it to the provided location. Supports local or s3 paths.",
    )
    args = parser.parse_args()

    try:
        file = open("/tmp/osmx.lock", "w")
        fcntl.lockf(file, fcntl.LOCK_EX | fcntl.LOCK_NB)

        s = ReplicationServer(args.replication_server)

        # OSMX always uses minutely timestamps internally - try integrating daily
        seqnum = subprocess.check_output([osmx, "query", args.osmx_db, "seqnum"])

        if not seqnum.strip():
            timestamp = subprocess.check_output(
                [osmx, "query", args.osmx_db, "timestamp"]
            )
            timestamp = timestamp.decode("utf-8").strip()
            timestamp = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%SZ")
            timestamp = timestamp.replace(tzinfo=timezone.utc)
            logger.info("Timestamp is {0}".format(timestamp))
            seqnum = s.timestamp_to_sequence(timestamp)

        seqnum = int(seqnum)

        logger.info("Sequence number is {0}".format(seqnum))

        latest = s.get_state_info().sequence
        logger.info("Latest is {0}".format(latest))

        current_id = seqnum + 1
        while current_id <= latest:
            fd, path = tempfile.mkstemp(suffix=".osc.gz")
            with open(fd, "wb") as f:
                f.write(s.get_diff_block(current_id))
            info = s.get_state_info(current_id)
            timestamp = info.timestamp.strftime("%Y-%m-%dT%H:%M:%SZ")

            if args.augmented_diff is not None:
                generate_augmented_diff(
                    current_id, args.osmx_db, path, args.augmented_diff
                )

            subprocess.check_call(
                [
                    osmx,
                    "update",
                    args.osmx_db,
                    path,
                    str(current_id),
                    timestamp,
                    "--commit",
                ]
            )
            os.unlink(path)
            current_id = current_id + 1

    except BlockingIOError:
        logger.warning("Process is running - exiting.")
    finally:
        fcntl.lockf(file, fcntl.LOCK_UN)
        file.close()


if __name__ == "__main__":
    main()
