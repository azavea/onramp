#!/usr/bin/env python
"""

From OSMExpress https://github.com/protomaps/osmexpress Copyright 2019 Protomaps.
All rights reserved. Licensed under 2-Clause BSD, see LICENSE

"""
import argparse
from datetime import datetime, timezone
import fcntl
import gzip
import logging
import os
import subprocess
import sys
from tempfile import NamedTemporaryFile
from textwrap import wrap
import time

from onramp import (
    augmented_diff,
    datetime_to_adiff_sequence,
    write_augmented_diff_status,
)
from onramp.exceptions import EmptyDiffException
from server import ReplicationServer

# expects osmx to be on the PATH.
osmx = "osmx"


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(logging.StreamHandler(sys.stdout))


def generate_augmented_diff(
    osmosis_state, osmx_db, osc_gz_file, output_path, replication_server_url
):
    """ Generate an augmented diff for changes between osmx_db and osc_gz_file.

    osmosis_state should be the state matching the osc_gz_file

    osmx_db must be valid at the start time of osc_gz_file. This is not checked.

    augmented diff is written to:
    output_path/adiff_seq_id[0:3]/adiff_seq_id[3:6]/adiff_seq_id[6:9].adiff.xml
    By converting osmosis_state.timestamp to minutely adiff_seq_id via
    datetime_to_adiff_sequence().

    output_path can be a local file path or an s3 uri.

    """
    adiff_start = time.time()
    current_id = osmosis_state.sequence
    adiff_seq_id = datetime_to_adiff_sequence(osmosis_state.timestamp)
    logger.debug(
        "OSM Change Sequence Id {} @ {} -> Minutely Augmented Diff Id {}".format(
            current_id, osmosis_state.timestamp, adiff_seq_id
        )
    )
    [pt1, pt2, pt3] = wrap(str(adiff_seq_id).zfill(9), 3)
    output_file = os.path.join(output_path, pt1, pt2, "{}.xml.gz".format(pt3))
    try:
        with gzip.open(osc_gz_file) as fp_unzipped:
            augmented_diff(
                osmx_db,
                fp_unzipped,
                output_file,
                end_timestamp=osmosis_state.timestamp,
                osc_sequence=osmosis_state.sequence,
                osc_url=replication_server_url,
            )
        write_augmented_diff_status(output_path, adiff_seq_id)
        logger.info(
            "\tAugmented diff {} generated in {}s".format(
                adiff_seq_id, time.time() - adiff_start
            )
        )
    except EmptyDiffException:
        logger.info("\tEmpty diff - no write")


def main():
    parser = argparse.ArgumentParser(
        description="Update an OSMX Database, optionally generating augmented diffs."
    )
    parser.add_argument("osmx_db", help="Path to OSMX database")
    parser.add_argument(
        "replication_server",
        help="Path to replication server, e.g. https://planet.openstreetmap.org/replication/minute/",
    )
    parser.add_argument(
        "-a",
        "--augmented-diff",
        help="Generate augmented diff and save it to the provided location. Supports local or s3 paths.",
    )
    args = parser.parse_args()

    try:
        file = open("/tmp/osmx.lock", "w")
        fcntl.lockf(file, fcntl.LOCK_EX | fcntl.LOCK_NB)

        s = ReplicationServer(args.replication_server)

        # OSMX always uses minutely timestamps internally - try integrating daily
        seqnum = subprocess.check_output([osmx, "query", args.osmx_db, "seqnum"])

        if not seqnum.strip():
            timestamp = subprocess.check_output(
                [osmx, "query", args.osmx_db, "timestamp"]
            )
            timestamp = timestamp.decode("utf-8").strip()
            timestamp = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%SZ")
            timestamp = timestamp.replace(tzinfo=timezone.utc)
            logger.info("Timestamp is {0}".format(timestamp))
            seqnum = s.timestamp_to_sequence(timestamp)

        seqnum = int(seqnum)

        logger.info("OSMX sequence number is {0}".format(seqnum))

        latest = s.get_state_info().sequence
        logger.info("Latest stream sequence number is {0}".format(latest))

        current_id = seqnum + 1
        while current_id <= latest:
            fp = NamedTemporaryFile(delete=False, suffix=".osc.gz")
            fp.write(s.get_diff_block(current_id))
            fp.close()
            osmosis_state = s.get_state_info(current_id)

            if args.augmented_diff is not None:
                generate_augmented_diff(
                    osmosis_state,
                    args.osmx_db,
                    fp.name,
                    args.augmented_diff,
                    args.replication_server,
                )

            subprocess.check_call(
                [
                    osmx,
                    "update",
                    args.osmx_db,
                    fp.name,
                    str(current_id),
                    osmosis_state.timestamp.strftime("%Y-%m-%dT%H:%M:%SZ"),
                    "--commit",
                ]
            )
            os.unlink(fp.name)
            current_id = current_id + 1

    except BlockingIOError:
        logger.warning("Process is running - exiting.")
    finally:
        fcntl.lockf(file, fcntl.LOCK_UN)
        file.close()


if __name__ == "__main__":
    main()
